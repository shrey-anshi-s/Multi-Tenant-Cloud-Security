#!/usr/bin/env python3
# AES‑128 implementation translated from the provided C++ source
# Author: (your‑name)
# --------------------------------------------------------------

from _future_ import annotations
import random
import time
from typing import List

# --------------------------------------------------------------------
# AES constants
Nb = 4           # columns in the state
Nk = 4           # 4 × 32‑bit words => 16‑byte key (AES‑128)
Nr = 10          # rounds

# --------------------------------------------------------------------
# S‑box and inverse S‑box tables
sbox = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B,
    0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26,
    0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2,
    0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
    0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED,
    0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F,
    0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
    0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC,
    0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14,
    0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D,
    0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F,
    0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
    0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11,
    0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F,
    0xB0, 0x54, 0xBB, 0x16,
]

inv_sbox = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E,
    0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
    0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32,
    0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49,
    0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50,
    0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05,
    0xB8, 0xB3, 0x45, 0x06, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
    0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41,
    0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8,
    0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
    0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B,
    0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59,
    0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
    0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D,
    0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63,
    0x55, 0x21, 0x0C, 0x7D,
]

# Rijndael Rcon
Rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]

# --------------------------------------------------------------------
# Helper routines
def gmul(a: int, b: int) -> int:
    """Galois‑field multiplication of two bytes (0‑255)"""
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a = ((a << 1) & 0xFF)
        if hi_bit_set:
            a ^= 0x1B
        b >>= 1
    return p

def sub_bytes(state: List[List[int]]) -> None:
    for r in range(4):
        for c in range(Nb):
            state[r][c] = sbox[state[r][c]]

def inv_sub_bytes(state: List[List[int]]) -> None:
    for r in range(4):
        for c in range(Nb):
            state[r][c] = inv_sbox[state[r][c]]

def shift_rows(state: List[List[int]]) -> None:
    state[1] = state[1][1:] + state[1][:1]
    state[2] = state[2][2:] + state[2][:2]
    state[3] = state[3][-1:] + state[3][:-1]

def inv_shift_rows(state: List[List[int]]) -> None:
    state[1] = state[1][-1:] + state[1][:-1]
    state[2] = state[2][-2:] + state[2][:-2]
    state[3] = state[3][1:] + state[3][:1]

def mix_columns(state: List[List[int]]) -> None:
    for c in range(Nb):
        col = [state[r][c] for r in range(4)]
        state[0][c] = gmul(0x02, col[0]) ^ gmul(0x03, col[1]) ^ col[2] ^ col[3]
        state[1][c] = col[0] ^ gmul(0x02, col[1]) ^ gmul(0x03, col[2]) ^ col[3]
        state[2][c] = col[0] ^ col[1] ^ gmul(0x02, col[2]) ^ gmul(0x03, col[3])
        state[3][c] = gmul(0x03, col[0]) ^ col[1] ^ col[2] ^ gmul(0x02, col[3])

def inv_mix_columns(state: List[List[int]]) -> None:
    for c in range(Nb):
        col = [state[r][c] for r in range(4)]
        state[0][c] = (
            gmul(0x0E, col[0]) ^ gmul(0x0B, col[1]) ^
            gmul(0x0D, col[2]) ^ gmul(0x09, col[3])
        )
        state[1][c] = (
            gmul(0x09, col[0]) ^ gmul(0x0E, col[1]) ^
            gmul(0x0B, col[2]) ^ gmul(0x0D, col[3])
        )
        state[2][c] = (
            gmul(0x0D, col[0]) ^ gmul(0x09, col[1]) ^
            gmul(0x0E, col[2]) ^ gmul(0x0B, col[3])
        )
        state[3][c] = (
            gmul(0x0B, col[0]) ^ gmul(0x0D, col[1]) ^
            gmul(0x09, col[2]) ^ gmul(0x0E, col[3])
        )

def add_round_key(state: List[List[int]], round_key: List[int]) -> None:
    """round_key is 4 * Nb bytes (one word per column)"""
    for c in range(Nb):
        word = round_key[c]
        state[0][c] ^= (word >> 24) & 0xFF
        state[1][c] ^= (word >> 16) & 0xFF
        state[2][c] ^= (word >> 8) & 0xFF
        state[3][c] ^= word & 0xFF

def key_expansion(key: bytes) -> List[int]:
    """Return (Nr+1)*Nb 32‑bit words"""
    assert len(key) == 16
    w = [(key[4*i] << 24) | (key[4*i+1] << 16) |
         (key[4*i+2] << 8) | key[4*i+3] for i in range(Nk)]

    for i in range(Nk, Nb * (Nr + 1)):
        temp = w[i-1]
        if i % Nk == 0:
            # RotWord + SubWord + Rcon
            temp = ((sbox[(temp >> 16) & 0xFF]) |
                    (sbox[(temp >> 8)  & 0xFF] << 8) |
                    (sbox[temp & 0xFF] << 16) |
                    (sbox[(temp >> 24) & 0xFF] << 24)) ^ (Rcon[i//Nk] << 24)
        w.append(w[i-Nk] ^ temp)
    return w

# --------------------------------------------------------------------
# AES core
def aes_encrypt_block(inp: bytes, round_keys: List[int]) -> bytes:
    state = [[0]*Nb for _ in range(4)]
    # map bytes into state matrix (column‑major)
    for i in range(4):
        for j in range(Nb):
            state[j][i] = inp[i*4 + j]

    add_round_key(state, round_keys[:Nb])

    for rnd in range(1, Nr):
        sub_bytes(state)
        shift_rows(state)
        mix_columns(state)
        add_round_key(state, round_keys[rnd*Nb:(rnd+1)*Nb])

    sub_bytes(state)
    shift_rows(state)
    add_round_key(state, round_keys[Nr*Nb:(Nr+1)*Nb])

    # flatten state back to bytes (inverse mapping)
    return bytes(state[j][i] for i in range(4) for j in range(Nb))

def aes_decrypt_block(inp: bytes, round_keys: List[int]) -> bytes:
    state = [[0]*Nb for _ in range(4)]
    for i in range(4):
        for j in range(Nb):
            state[j][i] = inp[i*4 + j]

    add_round_key(state, round_keys[Nr*Nb:(Nr+1)*Nb])

    for rnd in range(Nr-1, 0, -1):
        inv_shift_rows(state)
        inv_sub_bytes(state)
        add_round_key(state, round_keys[rnd*Nb:(rnd+1)*Nb])
        inv_mix_columns(state)

    inv_shift_rows(state)
    inv_sub_bytes(state)
    add_round_key(state, round_keys[:Nb])

    return bytes(state[j][i] for i in range(4) for j in range(Nb))

# --------------------------------------------------------------------
# Padding helpers (PKCS#7 style)
def pad_message(msg: bytes, block_size: int = 16) -> bytes:
    pad_len = block_size - (len(msg) % block_size)
    return msg + bytes([pad_len] * pad_len)

def unpad_message(padded: bytes) -> bytes:
    if not padded:
        return padded
    pad_len = padded[-1]
    if pad_len == 0 or pad_len > len(padded):
        raise ValueError("Invalid padding")
    return padded[:-pad_len]

# --------------------------------------------------------------------
# Utility
def print_hex(buf: bytes) -> None:
    print(" ".join(f"{b:02x}" for b in buf))

def generate_random_key(length: int = 16) -> bytes:
    random.seed(int(time.time()))
    return bytes(random.randint(0, 255) for _ in range(length))

# --------------------------------------------------------------------
def main() -> None:
    key = generate_random_key(16)
    print("Generated key:      ", end="")
    print_hex(key)

    round_keys = key_expansion(key)

    message = b"Hello, VPN!"
    print("Original message:   ", message.decode())

    padded = pad_message(message)

    # --- Encrypt
    ciphertext = bytearray(len(padded))
    for i in range(0, len(padded), 16):
        ciphertext[i:i+16] = aes_encrypt_block(padded[i:i+16], round_keys)

    print("Encrypted message:  ", end="")
    print_hex(ciphertext)

    # --- Decrypt
    plaintext_padded = bytearray(len(ciphertext))
    for i in range(0, len(ciphertext), 16):
        plaintext_padded[i:i+16] = aes_decrypt_block(ciphertext[i:i+16], round_keys)

    plaintext = unpad_message(plaintext_padded)

    print("Decrypted message:  ", plaintext.decode())

if _name_ == "_main_":
    main()